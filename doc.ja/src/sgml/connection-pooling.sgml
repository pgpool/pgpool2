<!-- doc/src/sgml/config.sgml -->

<sect1 id="runtime-config-connection-pooling">
 <!--
 <title>Connection Pooling</title>
 -->
 <title>コネクションプーリング</title>

 <para>
  <!--
  <productname>Pgpool-II</productname> maintains established
  connections to the <productname>PostgreSQL</> servers, and reuses them whenever a
  new connection with the same properties (i.e. user name, database,
  protocol version) comes in. It reduces the connection overhead,
  and improves system's overall throughput.
  -->
  <productname>Pgpool-II</productname>は確立された<productname>PostgreSQL</>サーバへの接続を保存しておき、同じ属性(ユーザ名、データベース、プロトコルバージョン)を持つ新しい接続が来た時にこれらを再利用します。
  これにより接続のオーバヘッドを低減し、システム全体のスループットを向上することができます。
 </para>

 <sect2 id="runtime-config-connection-pooling-settings">
  <!--
  <title>Connection Pooling Settings</title>
  -->
  <title>コネクションプールの設定</title>

  <variablelist>

   <varlistentry id="guc-connection-cache" xreflabel="connection_cache">
    <term><varname>connection_cache</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>connection_cache</varname> configuration parameter</primary>
      -->
      <primary><varname>connection_cache</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Caches connections to backends when set to on. Default is on.
      <emphasis>However, connections to <literal>template0</>, <literal>template1</>,
      <literal>postgres</> and <literal>regression</> databases are not cached even if
      <varname>connection_cache</> is on.</emphasis>
      -->
      onに設定されるとバックエンドへの接続をキャッシュします。
      デフォルトはonです。
      <emphasis>ただし、<varname>connection_cache</>がonでも、<literal>template0</>、<literal>template1</>、<literal>postgres</>、<literal>regression</>データベースへの接続はキャッシュされません。</emphasis>
     </para>
     <para>
      <!--
      You need to restart <productname>Pgpool-II</productname>
      if you change this value.
      -->
      このパラメータを変更した時には<productname>Pgpool-II</productname>を再起動してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-max-pool" xreflabel="max_pool">
    <term><varname>max_pool</varname> (<type>integer</type>)
     <indexterm>
      <!--
      <primary><varname>max_pool</varname> configuration parameter</primary>
      -->
      <primary><varname>max_pool</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      The maximum number of cached connections
      in each <productname>Pgpool-II</productname> child
      process.  <productname>Pgpool-II</productname> reuses the
      cached connection if an incoming connection is connecting
      to the same database with the same user name and the same
      run-time parameters.  If not,
      <productname>Pgpool-II</productname> creates a new
      connection to the backend.  If the number of cached
      connections exceeds max_pool, the oldest connection will
      be discarded, and uses that slot for the new connection.
      -->
      <productname>Pgpool-II</productname>の各子プロセスがキャッシュするコネクションの最大数です。
      <productname>Pgpool-II</productname>は、受け付けた接続が同じユーザ名かつ同じ実行時パラメータで同じデータベースに接続しようとする場合に、キャッシュされたコネクションを再利用します。
      そうでなければ<productname>Pgpool-II</productname>はバックエンドへの新しい接続を生成します。
      もしキャッシュされている接続の数がmax_poolを超えた場合には、一番古いコネクションが廃棄され、そのスロットが新しい接続のために使用されます。
     </para>
     <para>
      <!--
      Default value is 4. Please be aware that the number of
      connections from <productname>Pgpool-II</productname> processes to the backends may reach
      <xref linkend="guc-num-init-children"> * <varname>max_pool</> in total.
      -->
      デフォルト値は4です。
      <productname>Pgpool-II</productname>のプロセスからバックエンドへの接続の数は全部で<xref linkend="guc-num-init-children"> * <varname>max_pool</>に達する可能性があることに注意してください。
     </para>
     <para>
      <!--
      This parameter can only be set at server start.
      -->
      このパラメータはサーバ起動時にのみ設定可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-listen-backlog-multiplier" xreflabel="listen_backlog_multiplier">
    <term><varname>listen_backlog_multiplier</varname> (<type>integer</type>)
     <indexterm>
      <!--
      <primary><varname>listen_backlog_multiplier</varname> configuration parameter</primary>
      -->
      <primary><varname>listen_backlog_multiplier</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Specifies the length of connection queue from frontend to
      <productname>Pgpool-II</productname>. The queue length (actually
      <literal>"backlog"</literal> parameter of <literal>listen()</literal>
      system call) is defined as
      <varname>listen_backlog_multiplier</varname> * <xref linkend="guc-num-init-children">.
      -->
      フロントエンドから<productname>Pgpool-II</productname>への接続待ち行列の長さを制御します。
      接続待ち行列の長さ(具体的には<literal>listen()</literal>システムコールの<literal>backlog</literal>パラメータ)は、<varname>listen_backlog_multiplier</varname> * <xref linkend="guc-num-init-children">で決まります。
     </para>
     <note>
      <para>
       <!--
       Some systems have the upper limit of the backlog parameter of
       <literal>listen()</literal> system call.
       See <xref linkend="guc-num-init-children"> for more details.
       -->
       システムによっては<literal>listen()</literal>システムコールの<literal>backlog</literal>パラメータに上限が設定されています。
       詳細は<xref linkend="guc-num-init-children">の項を参照してください。
      </para>
     </note>
     <para>
      <!--
      Default is 2.
      -->
      デフォルト値は2です。
     </para>
     <para>
      <!--
      This parameter can only be set at server start.
      -->
      このパラメータはサーバ起動時にのみ設定可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-serialize-accept" xreflabel="serialize_accept">
    <term><varname>serialize_accept</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>serialize_accept</varname> configuration parameter</primary>
      -->
      <primary><varname>serialize_accept</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      When set to on, <productname>Pgpool-II</productname> enables the serialization
      on incoming client connections.
      Without serialization the OS kernel wakes up all of the <productname>
      Pgpool-II</productname> children processes to execute <literal>accept()</> and one of them
      actually gets the incoming connection. The problem here is, because so my child
      process wake up at a same time, heavy context switching occurs and the
      performance is affected.
      -->
      onに設定することで、<productname>Pgpool-II</productname>は受け付けるクライアント接続のシリアライズを有効にします。
      シリアライズを行わない場合、OSカーネルは<literal>accept()</literal>を実行するために全ての<productname>Pgpool-II</productname>子プロセスを起こし、実際にはそのうちの１つのみが入ってきた接続を処理します。
      ここでの問題は、子プロセスが一度に起こされるために重いコンテキストスイッチングが起こり、性能に影響がでることです。
     </para>
     <para>
      <!--
      This phenomena is a well known classic problem called
      "the thundering herd problem". This can be solved by
      serialization of the <literal>accept()</> calls, so that only one
      <productname>Pgpool-II</productname> process gets woken up
      for incoming connection to execute the <literal>accept()
     </literal>.
      -->
      この現象は「thundering herd problem（猛獣の暴走）」と呼ばれる古典的な問題です。
      これは<literal>accept()</literal>呼び出しのシリアライズを行うことで解決できます。
      入ってきた接続に対して<productname>Pgpool-II</productname>プロセスのうちひとつだけが起こされて<literal>accept()</literal>を実行するようになるためです。
     </para>

     <para>
      <!--
      But serialization has its own overheads, and it is recommended
      to be used only with the larger values of <xref linkend="guc-num-init-children">.
      For the small number of <xref linkend="guc-num-init-children">,
      the serialize accept can degrade the performance because of
      serializing overhead.
      -->
      しかしシリアライズにはオーバヘッドがあり、<xref linkend="guc-num-init-children">が大きい時のみ使用することを推奨します。
       小さい<xref linkend="guc-num-init-children">に対しては、シリアライズのオーバヘッドのために性能が低下するかもしれません。
     </para>

     <note>
      <para>
       <!--
       It is recommended to do a benchmark before deciding wether to use
       <varname>serialize_accept</varname> or not, because the corelation
       of <xref linkend="guc-num-init-children"> and <varname>serialize_accept</varname>
       can be different on different environments.
       -->
       <xref linkend="guc-num-init-children">と<varname>serialize_accept</varname>の相関は環境によって異なるので、<varname>serialize_accept</varname>を使うかどうか決める前にベンチマークテストを行ってみることをおすすめします。
      </para>
     </note>

     <example id="example-serialize-accept-pgbench">
      <!--
      <title>Using pgbench to decide if serialize_accept should be used</title>
      -->
      <title>serialize_acceptの使用判断のためにpgbenchを利用する</title>
      <para>
       <!--
       To run the <command>pgbench</command> use the following
       command.
       -->
       以下のコマンドを使って<command>pgbench</command>を実行します。
       <programlisting>
pgbench -n -S -p 9999 -c 32 -C -S -T 300 test
       </programlisting>
       <!--
       Here, <literal>-C</literal> tells <command>pgbench</command> to connect
       to database each time a transaction gets executed. <literal>-c 32</literal>
       specifies the number of the concurrent sessions to <productname>Pgpool-II</productname>.
       You should change this according to your system's requirement.
       After <command>pgbench</command> finishes, check the number from
       "including connections establishing".
       -->
       ここで、<literal>-C</literal>は<command>pgbench</command>にトランザクション実行の度に毎回データベースに接続することを指示します。
       <literal>-c 32</literal>は、<productname>Pgpool-II</productname>への同時セッション数です。
       これはシステム要件にあわせて変更するのがよいでしょう。
       <command>pgbench</command>が終了後、"including connections establishing" の数値をチェックします。
      </para>
     </example>

     <note>
      <para>
       <!--
       When <xref linkend="guc-child-life-time"> is enabled, <varname>serialize_accept</varname>
       has no effect. Make sure that you set <xref linkend="guc-child-life-time"> to 0 if you intend
       to turn on the <varname>serialize_accept</varname>.
       And if you are worried about <productname>Pgpool-II</productname> process memory leaks
       or whatever potential issue, you could use <xref linkend="guc-child-max-connections"> instead.
       This is purely an implementation limitation and may be removed in the future.
       -->
       なお、<xref linkend="guc-child-life-time"> が有効だと、<varname>serialize_accept</varname>は効果がありません。
	<varname>serialize_accept</varname>をonにしたい場合は、<xref linkend="guc-child-life-time">が0であることを確認してください。
	 <productname>Pgpool-II</productname>プロセスのメモリーリークなどの潜在的な問題を気にする場合は、代わりに<xref linkend="guc-child-max-connections">を使ってください。
	  この制限は純粋に実装上の問題であり、将来はなくなるかもしれません。
      </para>
     </note>

     <para>
      <!--
      Default is off.
      -->
      デフォルトはoffです。
     </para>
     <para>
      <!--
      This parameter can only be set at server start.
      -->
      このパラメータはサーバ起動時にのみ設定可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-child-life-time" xreflabel="child_life_time">
    <term><varname>child_life_time</varname> (<type>integer</type>)
     <indexterm>
      <!--
      <primary><varname>child_life_time</varname> configuration parameter</primary>
      -->
      <primary><varname>child_life_time</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Specifies the time in seconds to terminate a <productname>Pgpool-II
     </productname> child process if it remains idle. The new child process
      is immediately spawned by <productname>Pgpool-II</productname> when it
      is terminated because of <varname>child_life_time</varname>.
      <varname>child_life_time</varname> is a measure to prevent the
      memory leaks and other unexpected errors in <productname>Pgpool-II
     </productname> children.
      -->
      <productname>Pgpool-II</productname>の子プロセスがアイドル状態のままでいるときに、それを強制終了するまでの時間を秒単位で指定します。
      <varname>child_life_time</varname>により終了された時には、すぐに新しい子プロセスが<productname>Pgpool-II</productname>により起動されます。
      <varname>child_life_time</varname>は<productname>Pgpool-II</productname>子プロセスのメモリリークやその他の不測のエラーに備えた予防措置です。
     </para>
     <note>
      <para>
       <!--
       <varname>child_life_time</varname> does not apply to
       processes that have not accepted any connection yet.
       -->
       <varname>child_life_time</varname>はまだ一度もコネクションを受け付けていないプロセスには適用されません。
      </para>
     </note>
     <note>
      <para>
       <!--
       <xref linkend="guc-serialize-accept"> becomes ineffective when
       <varname>child_life_time</varname> is enabled.
       -->
       <varname>child_life_time</varname>が有効な場合、<xref linkend="guc-serialize-accept">は無効になります。
      </para>
     </note>
     <para>
      <!--
      Default is 300 (5 minutes) and setting it to 0 disables the feature.
      -->
      デフォルト値は300秒（すなわち5分）です。
      0を指定するとこの機能は無効になります。
     </para>
     <para>
      <!--
      This parameter can only be set at server start.
      -->
      このパラメータはサーバ起動時にのみ設定可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-client-idle-limit" xreflabel="client_idle_limit">
    <term><varname>client_idle_limit</varname> (<type>integer</type>)
     <indexterm>
      <!--
      <primary><varname>client_idle_limit</varname> configuration parameter</primary>
      -->
      <primary><varname>client_idle_limit</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Specifies the time in seconds to disconnect a client if it remains idle
      since the last query.
      This is useful for preventing the <productname>Pgpool-II</productname>
      children from being occupied by a lazy clients or broken TCP/IP
      connection between client and <productname>Pgpool-II</productname>.
      -->
      クライアントが前回のクエリからアイドル状態のままでいるときに、それを切断するまでの時間を秒単位で指定します。
      これは、だらしないクライアントや<productname>Pgpool-II</productname>とクライアントの間のTCP/IPコネクションの不調によって、
      <productname>Pgpool-II</productname>の子プロセスが占有されてしまうのを回避するのに役立ちます。
     </para>
     <note>
      <para>
       <!--
       <varname>client_idle_limit</varname> is ignored in
       the second stage of online recovery.
       -->
       <varname>client_idle_limit</varname>はオンラインリカバリのセカンドステージでは無視されます。
      </para>
     </note>
     <para>
      <!--
      The default is 0, which turns off the feature.
      -->
      デフォルト値は0で、この機能はoffとなります。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      You can also use <xref linkend="SQL-PGPOOL-SET"> command to alter the value of
      this parameter for a current session.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
      現在のセッションでのパラメータ値は、<xref linkend="SQL-PGPOOL-SET">コマンドで変更することもできます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-child-max-connections" xreflabel="child_max_connections">
    <term><varname>child_max_connections</varname> (<type>integer</type>)
     <indexterm>
      <!--
      <primary><varname>child_max_connections</varname> configuration parameter</primary>
      -->
      <primary><varname>child_max_connections</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Specifies the lifetime of a <productname>Pgpool-II</productname>
      child process in terms of the number of client connections it can receive.
      <productname>Pgpool-II</productname> will terminate the child process
      after it has served <varname>child_max_connections</varname> client
      connections and will immediately spawn a new child process to take its place.
      -->
      各<productname>Pgpool-II</productname>子プロセスの寿命を、受付可能なクライアント接続の数で指定します。
      <varname>child_max_connections</varname>個のクライアント接続を処理した後に<productname>Pgpool-II</productname>はその子プロセスを終了させ、すぐに代わりの新しい子プロセスを生成します。
     </para>
     <para>
      <!--
      <varname>child_max_connections</varname> is useful on a very busy server,
      where <xref linkend="guc-child-life-time"> and <xref linkend="guc-connection-life-time">
      never gets triggered. It is also useful to prevent the <productname>PostgreSQL</> servers from getting
      too big.
      -->
      <varname>child_max_connections</varname>は<xref linkend="guc-child-life-time">や<xref linkend="guc-connection-life-time">が効かないくらい忙しいサーバで有用です。
	また<productname>PostgreSQL</>バックエンドが肥大化するのを防ぐのにも有用です。
     </para>
     <para>
      <!--
      The default is 0, which turns off the feature.
      -->
      デフォルト値は0で、この機能はoffとなります。
     </para>
     <para>
      <!--
      This parameter can only be set at server start.
      -->
      このパラメータはサーバ起動時にのみ設定可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-connection-life-time" xreflabel="connection_life_time">
    <term><varname>connection_life_time</varname> (<type>integer</type>)
     <indexterm>
      <!--
      <primary><varname>connection_life_time</varname> configuration parameter</primary>
      -->
      <primary><varname>connection_life_time</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Specifies the time in seconds to terminate the cached connections
      to the <productname>PostgreSQL</> backend. This serves as the cached connection expiration time.
      -->
      キャッシュされた<productname>PostgreSQL</>への接続を切断するまでの時間を秒単位で指定します。
      これはキャッシュされた接続の有効期間として働きます。
     </para>
     <para>
      このキャッシュを保持するプロセスに接続中のクライアントがある場合は、その接続が終了するまで<varname>connection_life_time</varname>の有効期間が来たかどうかの計算は行われません。
      したがって、このパラメータの設定値よりも長時間キャッシュされたコネクションが保持されることがあり得ます。
      これを避けたい場合は、<xref linkend="guc-client-idle-limit">を短めに設定することをお勧めします。
     </para>
     <para>
      <!--
      The default is 0, which means the cached connections will not be disconnected.
      -->
      デフォルトは0です。
      これはキャッシュされた接続が切断されないことを意味しています。
     </para>
     <para>
      <!--
      This parameter can only be set at server start.
      -->
      このパラメータはサーバ起動時にのみ設定可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-reset-query-list" xreflabel="reset_query_list">
    <term><varname>reset_query_list</varname> (<type>string</type>)
     <indexterm>
      <!--
      <primary><varname>reset_query_list</varname> configuration parameter</primary>
      -->
      <primary><varname>reset_query_list</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Specifies the <acronym>SQL</acronym> commands to be sent to reset the backend connection
      when exiting the user session. Multiple commands can be specified by delimiting each
      by <literal>";"</literal>.
      -->
      ユーザセッションを終了するときにバックエンドコネクションを初期化するために送られる<acronym>SQL</acronym>コマンドを指定します。
      複数のコマンドを<literal>";"</literal>で区切って指定することができます。
     </para>

     <para>
      <!--
      The available commands differ among <productname>PostgreSQL</> versions.
      Below are some recommended settings for <varname>reset_query_list</varname>
      on different <productname>PostgreSQL</> versions.
      Note, however, that <literal>ABORT</literal> command should be always included.
      -->
      利用できるコマンドは<productname>PostgreSQL</>のバージョンによって異なります。
      各<productname>PostgreSQL</>バージョンごとの設定は以下です。
      ただし、"ABORT"は必ずコマンドに含めてください。
     </para>

     <table id="reset-query-list-suggestions-table">
      <!--
      <title>Recommended setting for <varname>reset_query_list</varname>
      on different PostgreSQL versions</title>
      -->
      <title>PostgreSQLバージョンごとの<varname>reset_query_list</varname>の推奨設定</title>
      <tgroup cols="2">
       <thead>
	<row>
	 <!--
	 <entry>PostgreSQL version</entry>
	 -->
	 <entry>PostgreSQLバージョン</entry>
	 <entry>reset_query_list</entry>
	</row>
       </thead>

       <tbody>
	<row>
	 <!--
	 <entry>7.1 or earlier</entry>
	 -->
	 <entry>7.1以前</entry>
	 <entry><literal>'ABORT'</literal></entry>
	</row>

	<row>
	 <!--
	 <entry>7.2 to 8.2</entry>
	 -->
	 <entry>7.2から8.2</entry>
	 <entry><literal>'ABORT; RESET ALL; SET SESSION AUTHORIZATION DEFAULT'</literal></entry>
	</row>

	<row>
	 <!--
	 <entry>8.3 or later</entry>
	 -->
	 <entry>8.3以降</entry>
	 <entry><literal>'ABORT; DISCARD ALL'</literal></entry>
	</row>

       </tbody>
      </tgroup>
     </table>

     <note>
      <para>
       <!--
       <literal>"ABORT"</literal> is not issued when not in a transaction block for 7.4 or later
       <productname>PostgreSQL</> versions.
       -->

       <literal>ABORT</literal>は、<productname>PostgreSQL</> 7.4以降ではトランザクションブロックの中にいない場合には発行されません。

      </para>
     </note>
     <para>
      <!--
      Default is <literal>'ABORT; DISCARD ALL'</literal>.
      -->
      デフォルトは<literal>'ABORT; DISCARD ALL'</literal>です。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </sect2>
</sect1>

<sect1 id="runtime-config-logging">
 <!--
 <title>Error Reporting and Logging</title>
 -->
 <title>エラー報告とログ取得</title>

 <sect2 id="runtime-config-logging-where-to-log">
  <!--
  <title>Where To Log</title>
  -->
  <title>ログの出力先</title>

  <variablelist>

   <varlistentry id="guc-log-destination" xreflabel="log_destination">
    <term><varname>log_destination</varname> (<type>string</type>)
     <indexterm>
      <!--
      <primary><varname>log_destination</varname> configuration parameter</primary>
      -->
      <primary><varname>log_destination</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      <productname>Pgpool-II</productname> supports two destinations
      for logging the <productname>Pgpool-II</productname> messages.
      The supported log destinations are <literal>stderr</literal>
      and <literal>syslog</literal>. You can also set this parameter to a list
      of desired log destinations separated by commas if you want the log messages
      on the multiple destinations.
      -->
      <productname>Pgpool-II</productname>は、<productname>Pgpool-II</productname>のメッセージのログ出力先を2種類サポートします。
      複数のログ出力先を使用したい場合は、希望するログ出力先をカンマで区切ったリストをパラメータに設定することができます。
      <programlisting>
#for example to log on both syslog and stderr
log_destination = 'syslog,stderr'
      </programlisting>
      <!--
      The default is to log to <literal>stderr</literal> only.
      -->
      デフォルトでは<literal>stderr</literal>のみにログ出力します。
     </para>
     <note>
      <para>
       <!--
       On some systems you will need to alter the configuration of your
       system's <application>syslog</application> daemon in order to make use of the
       <literal>syslog</literal> option
       for <varname>log_destination</varname>. <productname>Pgpool-II</productname>
       can log to <application>syslog</application> facilities LOCAL0 through LOCAL7
       (see <xref linkend="guc-syslog-facility">), but the default
       <application>syslog</application>
       configuration on most platforms will discard all such messages.
       You will need to add something like:
       -->
       <varname>log_destination</varname>でsyslogオプションを使用できるようにするために、いくつかのシステムではシステムの<application>syslog</application>デーモンの設定を変更しなければならないでしょう。
       <productname>Pgpool-II</productname>ではログを<literal>LOCAL0</literal>から<literal>LOCAL7</literal>までの<application>syslog</application>ファシリティで記録することができます（<xref linkend="guc-syslog-facility">を参照してください）。
	しかし、ほとんどのプラットフォームのデフォルトの<application>syslog</application>設定ではこれらのメッセージはすべて破棄されます。
	うまく動作させるために<application>syslog</application>デーモンの設定に以下のようなものを追加しなければならないでしょう。
	<programlisting>
local0.*    /var/log/pgpool.log
	</programlisting>
	<!--
	to the syslog daemon's configuration file to make it work.
	-->
      </para>
     </note>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-logging-collector" xreflabel="logging_collector">
    <term><varname>logging_collector</varname> (<type>boolean</type>)
     <indexterm>
      <primary><varname>logging_collector</varname>設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
<!--
	 This parameter enables the logging collector, which is a background process that captures
	 log messages sent to stderr and redirects them into log files.
-->
      このパラメータは<firstterm>ログ収集機構</firstterm>を有効にします。
      それは<systemitem>stderr</systemitem>に送られたログメッセージを捕捉し、ログファイルにリダイレクトするバックグラウンドプロセスです。
     </para>
     <note>
      <para>
<!--
       It is possible to log to stderr without using the logging collector; the log messages will
       just go to wherever the server's stderr is directed. However, that method is only suitable
       for low log volumes, since it provides no convenient way to rotate log files.
-->
       ログ収集機構を使わずに<systemitem>stderr</systemitem>にログを出力することもできます。
       その場合はログメッセージはサーバの<systemitem>stderr</systemitem>がリダイレクトされたところに単に出力されます。
       しかしこの方法はログの量が少ない場合にのみ適切な方法です。
       ログを巡回させる便利な方法がないからです。
      </para>
     </note>
     <para>
<!--
      This parameter can only be set at the Pgpool-II start.
-->
      このパラメータはサーバ起動時のみ設定可能です。
     </para>
     <para>
<!--
      <varname>logging_collector</varname> is not available prior to
      <productname>Pgpool-II </productname><emphasis>V4.2</emphasis>.
-->
      <varname>logging_collector</varname>は<productname>Pgpool-II </productname><emphasis>V4.2</emphasis>以降でのみ使用可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-directory" xreflabel="log_directory">
    <term><varname>log_directory</varname> (<type>string</type>)
     <indexterm>
<!--
      <primary><varname>log_directory</varname> configuration parameter</primary>
-->
      <primary><varname>log_directory</varname>設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
<!--
	 When <xref linkend="guc-logging-collector"> is enabled, this parameter determines
	 the directory in which log files will be created.
-->
      <xref linkend="guc-logging-collector">を有効と設定した場合、このパラメータはログファイルが作成されるディレクトリを確定します。
     </para>
<!--
     <para>The default is <literal>/tmp/pgpool_logs</literal>.</para>
-->
     <para>
      デフォルトは<literal>/tmp/pgpool_logs</literal>です。
      </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>

    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-filename" xreflabel="log_filename">
    <term><varname>log_filename</varname> (<type>string</type>)
     <indexterm>
<!--
      <primary><varname>log_filename</varname> configuration parameter</primary>
-->
      <primary><varname>log_filename</varname>設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
<!--
	 When <xref linkend="guc-logging-collector"> is enabled, this parameter sets the
	 file names of the created log files. The value is treated as a
	 <literal>strftime</literal> pattern, so %-escapes can be used to specify time-varying
	 file names.
	 The supported %-escapes are similar to those listed in the Open Group's
	 <ulink url="https://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime</ulink>specification.
-->
      <xref linkend="guc-logging-collector">が有効な場合、このパラメータは作成されたログファイルのファイル名を設定します。
      値は<function>strftime</function>パターンとして扱われるため、<literal>%</literal>エスケープを使用して、時刻によって変動するファイル名を指定することができます。
      サポートされている<literal>%</literal>-エスケープは<ulink url="http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime</ulink> 仕様によく似ています。
     </para>
     <para>
<!--
	 If you specify a file name without escapes, you should plan to use a log rotation
	 utility to avoid eventually filling the entire disk.
-->
      エスケープすることなくファイル名を指定する場合、ディスク全体を使い切ってしまうことを防止するためにログローテーションを行うユーティリティを使用することを計画するべきです。
     </para>
     <para>
<!--
	 The default is <literal>pgpool-%Y-%m-%d_%H%M%S.log</literal>.
-->
      デフォルトは<literal>pgpool-%Y-%m-%d_%H%M%S.log</literal>です。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>

    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-file-mode" xreflabel="log_file_mode">
    <term><varname>log_file_mode</varname> (<type>integer</type>)
     <indexterm>
<!--
      <primary><varname>log_file_mode</varname> configuration parameter</primary>
-->
      <primary><varname>log_file_mode</varname>設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
<!--
	 This parameter sets the permissions for log files when <xref linkend="guc-logging-collector">
	 is enabled. The parameter value is expected to be a numeric mode specified in the format
	 accepted by the <literal>chmod</literal> and <literal>umask</literal> system calls.
-->
      <xref linkend="guc-logging-collector">が有効になっている場合、このパラメータはログファイルのパーミッションを設定します。
       パラメータの値は<function>chmod</function> および <function>umask</function>システムコールで許容されるフォーマットで指定される数値モードであると期待されます。
     </para>

     <note>
      <para>
<!--
       To use the customary octal format the number must start with a 0 (zero).
-->
       8進数を使うには、数値を0（ゼロ）で開始してください。
      </para>
     </note>

     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
    <term><varname>log_rotation_age</varname> (<type>integer</type>)
     <indexterm>
<!--
      <primary><varname>log_rotation_age</varname> configuration parameter</primary>
-->
      <primary><varname>log_rotation_age</varname>設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
<!--
      When <xref linkend="guc-logging-collector"> is enabled, this parameter determines
      the maximum amount of time to use an individual log file, after which a new log
      file will be created. If this value is specified without units,
      it is taken as minutes. The default is 24 hours.
-->
      <xref linkend="guc-logging-collector">が有効な場合、このパラメータは個々のログファイルの最大寿命を決定します。
      この値が単位なしで指定された場合は、分単位であるとみなします。 デフォルトは24時間です。
     </para>
     <para>
<!--
      Set to zero to disable size-based creation of new log files.
-->
      ゼロに設定することで、寿命に基づいた新しいログファイルの生成は無効になります。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
    <term><varname>log_rotation_size</varname> (<type>integer</type>)
     <indexterm>
<!--
      <primary><varname>log_rotation_size</varname> configuration parameter</primary>
-->
      <primary><varname>log_rotation_size</varname>設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
<!--
      When <xref linkend="guc-logging-collector"> is enabled, this parameter determines
      the maximum size of an individual log file. After this many kilobytes have been
      emitted into a log file, a new log file will be created.
-->
      <xref linkend="guc-logging-collector">が有効な場合、このパラメータは個々のログファイルの最大容量を決定します。
       ここでキロバイト単位で指定したデータ量がログファイルに出力された後、新しいログファイルが生成されます。
     </para>
     <para>
<!--
      Set to zero to disable size-based creation of new log files.
-->
      ゼロに設定することで、サイズに基づいた新しいログファイルの生成は無効になります。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
    <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)
     <indexterm>
<!--
      <primary><varname>log_truncate_on_rotation</varname> configuration parameter</primary>
-->
      <primary><varname>log_truncate_on_rotation</varname>設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
<!--
      When <xref linkend="guc-logging-collector"> is enabled,
      this parameter will cause <productname>Pgpool-II</> to truncate (overwrite),
      rather than append to, any existing log file of the same name.
      However, truncation will occur only when a new file is being opened due to
      time-based rotation, not during the startup or size-based rotation.
      When off, pre-existing files will be appended to in all cases.
      For example, using this setting in combination with a <xref linkend="guc-log-filename">
      like pgpool-%H.log would result in generating twenty-four hourly log
      files and then cyclically overwriting them.
-->
      <xref linkend="guc-logging-collector">が有効な場合、<productname>PostgreSQL</productname>は既存の同名のファイルに追加するのではなく、そのファイルを切り詰める（上書きする）ようになります。
       しかし、切り詰めは時間を基にしたローテーションのために新規にファイルが開かれた時にのみ発生し、サーバ起動時やサイズを基にしたローテーションでは発生しません。
       オフの場合、全ての場合において既存のファイルに追記されます。
       例えば、この設定を<literal>pgpool-%H.log</literal>のような<xref linkend="guc-log-filename">と組み合わせて使用すると、24個の時別のログファイルが生成され、それらは周期的に上書きされることになります。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
    <term><varname>syslog_facility</varname> (<type>enum</type>)
     <indexterm>
      <!--
      <primary><varname>syslog_facility</varname> configuration parameter</primary>
      -->
      <primary><varname>syslog_facility</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      When logging to <application>syslog</application> is enabled,
      this parameter determines the <application>syslog</application>
      <literal>"facility"</literal> to be used.
      You can choose from <literal>LOCAL0</>, <literal>LOCAL1</>,
      <literal>LOCAL2</>, <literal>LOCAL3</>, <literal>LOCAL4</>,
      <literal>LOCAL5</>, <literal>LOCAL6</>, <literal>LOCAL7</>;
      the default is <literal>LOCAL0</>.
      See also the documentation of your system's <application>syslog</> daemon.
      -->
      <application>syslog</application>へのログ取得が有効な場合、このパラメータは使用される<application>syslog</application>の「<literal>facility</literal>」を決定します。
      <literal>LOCAL0</>、<literal>LOCAL1</>、<literal>LOCAL2</>、<literal>LOCAL3</>、<literal>LOCAL4</>、<literal>LOCAL5</>、<literal>LOCAL6</>、<literal>LOCAL7</>の中から選んでください。
      デフォルトは<literal>LOCAL0</>です。
      使用しているシステムの<application>syslog</application>デーモンの文書を同時に参照してください。
     </para>

     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
    <term><varname>syslog_ident</varname> (<type>string</type>)
     <indexterm>
      <!--
      <primary><varname>syslog_ident</varname> configuration parameter</primary>
      -->
      <primary><varname>syslog_ident</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      When logging to <application>syslog</> is enabled, this parameter determines
      the program name used to identify <productname>Pgpool-II</productname>
      messages in <application>syslog</> logs. The default is <literal>pgpool</literal>.
      -->
      <application>syslog</>へのログ取得が有効な場合、このパラメータは<application>syslog</>ログ内の<productname>Pgpool-II</productname>メッセージを特定するのに使用するプログラム名を確定します。
      デフォルトは<literal>pgpool</literal>です。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </sect2>

 <sect2 id="runtime-config-logging-when-to-log">
  <!--
  <title>When To Log</title>
  -->
  <title>いつログを取得するか</title>

  <variablelist>

   <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
    <term><varname>client_min_messages</varname> (<type>enum</type>)
     <indexterm>
      <!--
      <primary><varname>client_min_messages</varname> configuration parameter</primary>
      -->
      <primary><varname>client_min_messages</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Controls which minimum message levels are sent to the client.
      Valid values are <literal>DEBUG5</>, <literal>DEBUG4</>,
      <literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>,
      <literal>LOG</>, <literal>NOTICE</>, <literal>WARNING</> and
      <literal>ERROR</>. Each level includes
      all the levels that follow it. The default is <literal>NOTICE</>.
      -->
      どのメッセージ階層をクライアントに送るかを管理します。
      有効な値は、<literal>DEBUG5</>、<literal>DEBUG4</>、<literal>DEBUG3</>、<literal>DEBUG2</>、<literal>DEBUG1</>、<literal>LOG</>、<literal>NOTICE</>、<literal>WARNING</>、および<literal>ERROR</>です。
      それぞれの階層はそれに続く全ての階層を包含します。
      デフォルトは<literal>NOTICE</>です。
     </para>

     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      You can also use <xref linkend="SQL-PGPOOL-SET"> command to alter the value of
      this parameter for a current session.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
      現在のセッションでのパラメータ値は、<xref linkend="SQL-PGPOOL-SET">コマンドで変更することもできます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
    <term><varname>log_min_messages</varname> (<type>enum</type>)
     <indexterm>
      <!--
      <primary><varname>log_min_messages</varname> configuration parameter</primary>
      -->
      <primary><varname>log_min_messages</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Controls which minimum message levels are emitted to log.
      Valid values are <literal>DEBUG5</>, <literal>DEBUG4</>,
      <literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>,
      <literal>INFO</>, <literal>NOTICE</>, <literal>WARNING</>,
      <literal>ERROR</>, <literal>LOG</>, <literal>FATAL</>,
      and <literal>PANIC</>.
      Each level includes all the levels that follow it.
      The default is <literal>WARNING</>.
      -->
      どのメッセージ階層をサーバログに書き込むかを管理します。有効な値は<literal>DEBUG5</>、<literal>DEBUG4</>、<literal>DEBUG3</>、<literal>DEBUG2</>、<literal>DEBUG1</>、<literal>INFO</>、<literal>NOTICE</>、<literal>WARNING</>、<literal>ERROR</>、<literal>LOG</>、<literal>FATAL</>、および<literal>PANIC</>です。
      それぞれの階層はその下の全ての階層を含みます。
      デフォルトは<literal>WARNING</>です。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      You can also use <xref linkend="SQL-PGPOOL-SET"> command to alter the value of
      this parameter for a current session.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
      現在のセッションでのパラメータ値は、<xref linkend="SQL-PGPOOL-SET">コマンドで変更することもできます。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </sect2>

 <sect2 id="runtime-config-logging-what-to-log">
  <!--
  <title>What To Log</title>
  -->
  <title>何をログに</title>

  <variablelist>

   <varlistentry id="guc-log-statement" xreflabel="log_statement">
    <term><varname>log_statement</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>log_statement</varname> configuration parameter</primary>
      -->
      <primary><varname>log_statement</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Setting to on, prints all SQL statements to the log.
      -->
      onに設定されている場合、全てのSQL文をログ出力します。
     </para>

     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      You can also use <xref linkend="SQL-PGPOOL-SET"> command to alter the value of
      this parameter for a current session.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
      現在のセッションでのパラメータ値は、<xref linkend="SQL-PGPOOL-SET">コマンドで変更することもできます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-per-node-statement" xreflabel="log_per_node_statement">
    <term><varname>log_per_node_statement</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>log_per_node_statement</varname> configuration parameter</primary>
      -->
      <primary><varname>log_per_node_statement</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Similar to <xref linkend="guc-log-statement">, except that it prints the
      logs for each DB node separately. It can be useful to make sure that
      replication or load-balancing is working.
      -->
      <xref linkend="guc-log-statement">と似ていますが、DBノード単位でログが出力されます。
       レプリケーションや負荷分散が動いていることを確認するのに便利です。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      You can also use <xref linkend="SQL-PGPOOL-SET"> command to alter the value of
      this parameter for a current session.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
      現在のセッションでのパラメータ値は、<xref linkend="SQL-PGPOOL-SET">コマンドで変更することもできます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-notice-per-node-statement" xreflabel="notice_per_node_statement">
    <term><varname>notice_per_node_statement</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>notice_per_node_statement</varname> configuration parameter</primary>
      -->
      <primary><varname>notice_per_node_statement</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Similar to <xref linkend="guc-log-per-node-statement">, except
      that it prints the statement logs for each DB node separately as
      a NOTICE message. With the
      default <xref linkend="client_min_messages"> setting (that is
      NOTICE), the log message will be printed on client's terminal as
      well. This is convenient for clients because it does not need to
      access <productname>Pgpool-II</productname> log file.  Note that
      unlike <xref linkend="guc-log-per-node-statement">, <xref linkend="guc-notice-per-node-statement">
      does not print internal queries, (e.g., system catalog inquiry).
      This is because this feature is designed to be used for testing
      as well. As internal queries tend to be non-deterministic,
      printing them in testing is not helpful. For the same reason,
      backend process id is not printed.
      -->
      <xref linkend="guc-log-per-node-statement">と似ていますが、NOTICEメッセージとしてDBノード単位でログが出力されます。
      <xref linkend="guc-client-min-messages">のデフォルト設定(すなわちNOTICE)では、このログメッセージはクライアントの端末にも出力されます。
      クライアントにとっては、<productname>Pgpool-II</productname>のログファイルにアクセスする必要がないので便利です。
      <xref linkend="guc-log-per-node-statement">と違って、<xref linkend="guc-notice-per-node-statement">は内部的に発行する問い合わせ（たとえば
システムカタログへの問い合わせ）は出力しないことに注意してください。
      これは、この機能がテストにも使えるように設計されているからです。
      内部的な問い合わせは非決定論的に発行される傾向があるため、テストに使うには適していません。
      同じ理由で、バックエンドのプロセスIDも出力されません。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      You can also use <xref linkend="SQL-PGPOOL-SET"> command to alter the value of
      this parameter for a current session.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
      現在のセッションでのパラメータ値は、<xref linkend="SQL-PGPOOL-SET">コマンドで変更することもできます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-client-messages" xreflabel="log_client_messages">
    <term><varname>log_client_messages</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>log_client_messages</varname> configuration parameter</primary>
      -->
      <primary><varname>log_client_messages</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Setting to on, prints client messages to the messages.
      -->
      onに設定されている場合、クライアントメッセージをログ出力します。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      You can also use <xref linkend="SQL-PGPOOL-SET"> command to alter the value of
      this parameter for a current session.
      -->
      このパラメータは、<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
      現在のセッションでのパラメータ値は、<xref linkend="SQL-PGPOOL-SET">コマンドで変更することもできます。

     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-backend-messages" xreflabel="log_backend_messages">
    <term><varname>log_backend_messages</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>log_backend_messages</varname> configuration parameter</primary>
      -->
      <primary><varname>log_backend_messages</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Setting to <literal>terse</literal>
      or <literal>verbose</literal>, prints backend messages to the
      log.  With <literal>terse</literal> the number of same kind of
      messages are recorded and is printed when different kind of
      messages is sent. Below is an example.
      <programlisting>
       LOG:  last DataRow message from backend 0 repeated 10 times
      </programlisting>
      Thus the log will not be printed if the process corresponding to
      the session is killed. If you want to print the log even in this
      case, use <literal>verbose</literal> option. Note that with the
      option each repeated message is printed and lots of log lines
      are printed. The default is <literal>none</literal>, which
      disables printing log messages from backend.
      -->
      <literal>terse</literal>または<literal>verbose</literal>に設定されている場合、バックエンドからのメッセージをログ出力します
      <literal>terse</literal>では、同じ種類のメッセージが同じバックエンドから送られてくると、その回数を記録し、次に異なる種類のメセージが送られてきた時に繰り返し回数を報告します。
      出力例を示します。
      <programlisting>
       LOG:  last DataRow message from backend 0 repeated 10 times
      </programlisting>
      したがって、繰り返している最中にセッションに対応するプロセスが強制終了すると、その分のログが出力されません。
      この場合でもすべてのログを出力するには、<literal>verbose</literal>オプションを使用します。
      ただし、このオプションでは繰り返し回数分だけの行のログが出力されるので、大量のメッセージがバックエンドから送られてくる場合は注意が必要です。
      デフォルトは<literal>none</literal>で、バックエンドからのメッセージをログ出力しません。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      You can also use <xref linkend="SQL-PGPOOL-SET"> command to alter the value of
      this parameter for a current session.
      -->
      このパラメータは、<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
      現在のセッションでのパラメータ値は、<xref linkend="SQL-PGPOOL-SET">コマンドで変更することもできます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
    <term><varname>log_hostname</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>log_hostname</varname> configuration parameter</primary>
      -->
      <primary><varname>log_hostname</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Setting to on, prints the hostname instead of IP address
      in the <command>ps</> command result, and connection logs
      (when <xref linkend="guc-log-connections"> is on).
      -->
      onに設定されている場合、<command>ps</>コマンドの結果、および（<xref linkend="guc-log-connections">がonの場合には）接続時のログに、IPアドレスではなくホスト名を表示します。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-connections" xreflabel="log_connections">
    <term><varname>log_connections</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>log_connections</varname> configuration parameter</primary>
      -->
      <primary><varname>log_connections</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Setting to on, prints all client connections from to the log.
      -->
      onに設定されている場合、全てのクライアント接続をログへ出力します。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
    <term><varname>log_disconnections</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>log_disconnections</varname> configuration parameter</primary>
      -->
      <primary><varname>log_disconnections</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Setting to on, prints all client connection terminations to the log.
      -->
      onに設定されている場合、全てのクライアント接続終了をログへ出力します。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-pcp-processes" xreflabel="log_pcp_processes">
    <term><varname>log_pcp_processes</varname> (<type>boolean</type>)
     <indexterm>
      <!--
      <primary><varname>log_pcp_processes</varname> configuration parameter</primary>
       -->
      <primary><varname>log_pcp_processes</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Setting to on, enable logging about normal PCP Process
      fork and exit status. Default is on.
      -->
      onに設定されている場合、PCPプロセスの正常なforkあるいはexitした状態をログに出力します。
      デフォルトはonです。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
    <term><varname>log_error_verbosity</varname> (<type>enum</type>)
     <indexterm>
      <!--
      <primary><varname>log_error_verbosity</varname> configuration parameter</primary>
      -->
      <primary><varname>log_error_verbosity</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      Controls the amount of detail emitted for each message that is logged.
      Valid values are <literal>TERSE</>, <literal>DEFAULT</>, and <literal>VERBOSE</>,
      each adding more fields
      to displayed messages. <literal>TERSE</> excludes the logging of <literal>DETAIL</>,
      <literal>HINT</>, <literal>QUERY</>
      and <literal>CONTEXT</> error information.
      -->
      ログ取得されるそれぞれのメッセージに対し、サーバログに書き込まれる詳細の量を制御します。
      有効な値は、<literal>TERSE</>、<literal>DEFAULT</>、および<literal>VERBOSE</>で、それぞれは表示されるメッセージにより多くのフィールドを追加します。
      <literal>TERSE</>は<literal>DETAIL</>、<literal>HINT</>、<literal>QUERY</>、および<literal>CONTEXT</>エラー情報を除外します。
     </para>
     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      You can also use <xref linkend="SQL-PGPOOL-SET"> command to alter the value of
      this parameter for a current session.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
      現在のセッションでのパラメータ値は、<xref linkend="SQL-PGPOOL-SET">コマンドで変更することもできます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
    <term><varname>log_line_prefix</varname> (<type>string</type>)
     <indexterm>
      <!--
      <primary><varname>log_line_prefix</varname> configuration parameter</primary>
      -->
      <primary><varname>log_line_prefix</varname> 設定パラメータ</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <!--
      This is a <function>printf</>-style string that is output at the beginning of
      each log line.
      <literal>%</literal> characters begin <quote>escape sequences</> that are replaced
      with information outlined below.
      All unrecognized escapes are ignored. Other characters are copied straight to
      the log line. Default is '%m: %a pid %p: ', which prints timestamp, application name and process id.
      -->
      これは、各ログ行の先頭に出力する<function>printf</>の書式文字列です。
      <literal>%</>から始まる<quote>エスケープシーケンス</>は、後述の通りのステータス情報で置き換えられます。
      認識できないエスケープは無視されます。
      他の文字はそのままログ行に出力されます。
      デフォルトは '%m: %a pid %p: 'で、タイムスタンプ、アプリケーション名、プロセスIDを印字します。
     </para>

     <table id="log-line-prefix-table">
      <title>log_line_prefixのエスケープオプション</title>

      <tgroup cols="2">
       <thead>
	<row>
	 <!--
	 <entry>Escape</entry>
	 <entry>Effect</entry>
	 -->
	 <entry>エスケープ</entry>
	 <entry>効果</entry>
	</row>
       </thead>

       <tbody>
	<row>
	 <entry>%a</entry>
	 <entry>
	  アプリケーション名。
	  子プロセス（セッションプロセス）の初期値は"child"です。
	  クライアントがアプリケーション名（スタートアップメッセージあるいはSETコマンドを使って）を設定すると、アプリケーション名は変更されます。
	  他の種類のプロセスでは、アプリケーション名はハードコードされた文字列です。
	  <xref linkend="application-name-table">を参照してください。
	 </entry>
	</row>

	<row>
	 <entry>%p</entry>
	 <!--
	 <entry>Process ID (PID)</entry>
	 -->
	 <entry>プロセスID (PID)</entry>
	</row>

	<row>
	 <entry>%P</entry>
	 <!--
	 <entry>Process name</entry>
	 -->
	 <entry>プロセス名</entry>
	</row>

	<row>
	 <entry>%t</entry>
	 <entry>ミリ秒なしのタイムスタンプ</entry>
	</row>

	<row>
	 <entry>%m</entry>
	 <entry>ミリ秒付きのタイムスタンプ</entry>
	</row>

	<row>
	 <entry>%d</entry>
	 <!--
	 <entry>Database name</entry>
	 -->
	 <entry>データベース名</entry>
	</row>

	<row>
	 <entry>%u</entry>
	 <!--
	 <entry>User name</entry>
	 -->
	 <entry>ユーザ名</entry>
	</row>

	<row>
	 <entry>%l</entry>
	 <!--
	 <entry>Log line number for each process</entry>
	 -->
	 <entry>プロセスごとのログ行番号</entry>
	</row>

	<row>
	 <entry>%%</entry>
	 <!--
	 <entry>'%' character</entry>
	 -->
	 <entry>'%' 文字自身</entry>
	</row>

       </tbody>
      </tgroup>
     </table>

     <table id="application-name-table">
      <title>各プロセスのアプリケーション名</title>

      <tgroup cols="2">
       <thead>
	<row>
	 <entry>プロセスの種類</entry>
	 <entry>アプリケーション名</entry>
	</row>
       </thead>

       <tbody>

	<row>
	 <entry>main</entry>
	 <entry>main</entry>
	</row>

	<row>
	 <entry>child</entry>
	 <entry>child</entry>
	</row>

	<row>
	 <entry>streaming replication delay check worker</entry>
	 <entry>sr_check_worker</entry>
	</row>

	<row>
	 <entry>watchdog heart beat sender</entry>
	 <entry>heart_beat_sender</entry>
	</row>

	<row>
	 <entry>watchdog heart beat receiver</entry>
	 <entry>heart_beat_receiver</entry>
	</row>

	<row>
	 <entry>watchdog</entry>
	 <entry>watchdog</entry>
	</row>

	<row>
	 <entry>watchdog life check</entry>
	 <entry>life_check</entry>
	</row>

	<row>
	 <entry>follow primary child</entry>
	 <entry>follow_child</entry>
	</row>

	<row>
	 <entry>watchdog utility</entry>
	 <entry>watchdog_utility</entry>
	</row>

	<row>
	 <entry>pcp main</entry>
	 <entry>pcp_main</entry>
	</row>

	<row>
	 <entry>pcp child</entry>
	 <entry>pcp_child</entry>
	</row>

	<row>
	 <entry>health check process</entry>
	 <entry>health_check%d (%dはバックエンドノードIDに置換されます)</entry>
	</row>

	<row>
	 <entry>logger process</entry>
	 <entry>logger (loggerプロセスが管理するログファイルに「logger」というアプリケーション名が出力されることはありません)</entry>
	</row>

       </tbody>
      </tgroup>
     </table>

     <para>
      <!--
      This parameter can be changed by reloading the <productname>Pgpool-II</> configurations.
      -->
      このパラメータは<productname>Pgpool-II</>の設定を再読み込みすることで変更可能です。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </sect2>
</sect1>
